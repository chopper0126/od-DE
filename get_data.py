'''
订单分配初始化数据
'''
import numpy as np


def init_data():
    # 初始化数据
    M = 7
    Oir = 3 # 工序
    O = 3 # 订单数
    d = [185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241
          ]  # 供应商与顾客的距离 改   3*7*3 读取数据库格式：读取数据库格式：按照AK排，每个订单 d 都一样
    P = [240, 230, 220, 210, 245, 235, 225,
         185, 198, 196, 175, 155, 175, 165,
         195, 165, 175, 150, 150, 190, 163,
         240, 230, 220, 210, 245, 235, 225,
         185, 198, 196, 175, 155, 175, 165,
         195, 165, 175, 150, 150, 190, 163,
         240, 230, 220, 210, 245, 235, 225,
         185, 198, 196, 175, 155, 175, 165,
         195, 165, 175, 150, 150, 190, 163
         ]  # 单价p    3*7*3  改   读取数据库格式：按照AK排，
    t = [146 , 132 , 122 ,
         140 , 120 , 130 ,
         120 , 130 , 150 ]  # 订单     3*3  改
    yunfei = 5  # 单位距离配送价格
    amin = [0] * M * Oir * O
    amax = [110 * 100, 110 * 100, 100 * 100, 100 * 100, 140 * 100, 125 * 100, 140 * 100,
            130 * 100, 170 * 100, 155 * 100, 110 * 100, 110 * 100, 120 * 100, 110 * 100,
            190* 100, 110 * 100, 115 * 100, 115 * 100, 110 * 100, 120 * 100, 120 * 100
            ]  # 改  3*7*3  读取数据库格式：100\200  之后再乘以100
    Co = [5 * 24,4 * 24,5 * 24]  #  3  需要增加时间条件
    Pir = [1, 2, 3,
           1, 2, 3,
           1, 2, 3]  # 3*3 需要增加优先级，工序
    mean_v = 90
    good_p = np.array([5.24959744, 10.78959422, 8.84181833, 40.32418595, 5.0165174, 22.42633472,
                       6.3847671, 5.73216712, 5.066344, 5.16240637, 9.21130136, 39.10845744,
                       6.32625664, 28.4067019, 5.01600659, 7.45698086, 12.43456253, 23.23068573, 34.4155452,
                       5.48714334, 11.01312505, 8.34729214, 40.49066999, 16.9625515,
                       13.36428185, 5.17530975, 7.95158742, 6.72807753, 7.26196279, 5.22171634
                          , 5.10605047, 6.74460108, 15.09387657, 39.06158359, 20.57678895, 5.01979423
                          , 5.99031298, 13.63275747, 32.82626417, 22.21654759, 5.08358577, 14.29102637
                          , 5.03912101, 5.6416357, 38.48462916, 16.01781318, 11.34773976, 5.00400576
                          , 17.47199347, 22.22081868, 6.45840683, 5.11171677, 32.85661843, 11.63611983
                          , 8.00485779, 12.8287266, 5.02016695, 8.58761759, 5.80082289, 21.97257134
                          , 24.55942164, 5.01334379, 28.06376107]
                      )
    return M, Oir,O, d, P, t, yunfei, amin, amax ,Co ,Pir ,mean_v,good_p

def init_data_m4():
    # 初始化数据
    M = 4
    Oir = 3 # 工序
    O = 3 # 订单数
    d = [185, 205, 220, 230,
         185, 205, 220, 230,
         185, 205, 220, 230,
         185, 205, 220, 230,
         185, 205, 220, 230,
         185, 205, 220, 230,
         185, 205, 220, 230,
         185, 205, 220, 230,
         185, 205, 220, 230
          ]  # 供应商与顾客的距离 改   3*7*3 读取数据库格式：读取数据库格式：按照AK排，每个订单 d 都一样
    P = [240, 230, 220, 210,
         185, 198, 196, 175,
         195, 165, 175, 150,
         240, 230, 220, 210,
         185, 198, 196, 175,
         195, 165, 175, 150,
         240, 230, 220, 210,
         185, 198, 196, 175,
         195, 165, 175, 150
         ]  # 单价p    3*7*3  改   读取数据库格式：按照AK排，
    t = [146 , 132 , 122 ,
         140 , 120 , 130 ,
         120 , 130 , 150 ]  # 订单     3*3  改
    yunfei = 5  # 单位距离配送价格
    amin = [0] * M * Oir * O
    # amax = [110 * 100, 110 * 100, 100 * 100, 100 * 100,
    #         130 * 100, 170 * 100, 155 * 100, 110 * 100,
    #         190* 100, 110 * 100, 115 * 100, 115 * 100
    #         ]  # 改  3*7*3  读取数据库格式：100\200  之后再乘以100
    amax = [110 , 110 , 100 , 100 ,
            130 , 170 , 155 , 110 ,
            190 , 110 , 115 , 115
            ]  # 改  3*7*3  读取数据库格式：100\200  之后再乘以100
    Co = [5 * 24,4 * 24,5 * 24]  #  3  需要增加时间条件
    Pir = [1, 2, 3,
           1, 2, 3,
           1, 2, 3]  # 3*3 需要增加优先级，工序
    mean_v = 90
    good_p = np.array([5.24959744, 10.78959422, 8.84181833, 40.32418595,
                       5.73216712, 5.066344, 5.16240637, 9.21130136,
                       5.01600659, 7.45698086, 12.43456253, 23.23068573,
                       8.34729214, 40.49066999, 16.9625515, 13.36428185,
                       5.17530975, 7.95158742, 6.72807753, 7.26196279,
                       15.09387657, 39.06158359, 20.57678895, 5.01979423,
                       22.21654759, 5.08358577, 14.29102637, 5.03912101,
                       5.6416357, 38.48462916, 16.01781318, 11.34773976,
                       6.45840683, 5.11171677, 32.85661843, 11.63611983
                       ]
                      )
    return M, Oir,O, d, P, t, yunfei, amin, amax ,Co ,Pir ,mean_v,good_p

def init_data_m100():
    # 初始化数据
    M = 100
    Oir = 1 # 工序
    O = 1 # 订单数
    d = np.random.uniform(100,300,(M))
    P = np.random.uniform(100,300,(M))
    amax = np.random.uniform(10,300,(M))


    t = [
          2500 ]  # 订单     3*3  改
    yunfei = 5  # 单位距离配送价格
    amin = [0] * M * Oir * O
    # amax = [110 * 100, 110 * 100, 100 * 100, 100 * 100,
    #         130 * 100, 170 * 100, 155 * 100, 110 * 100,
    #         190* 100, 110 * 100, 115 * 100, 115 * 100
    #         ]  # 改  3*7*3  读取数据库格式：100\200  之后再乘以100

    Co = [5 * 24]  #  3  需要增加时间条件
    Pir = [3]  # 3*3 需要增加优先级，工序
    mean_v = 90

    good_p = np.random.uniform(0,100,(M))

    return M, Oir,O, d, P, t, yunfei, amin, amax ,Co ,Pir ,mean_v,good_p
