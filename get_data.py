'''
订单分配初始化数据
'''
import numpy as np


def init_data():
    # 初始化数据
    M = 7
    Oir = 3 # 工序
    O = 3 # 订单数
    d = [185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241
          ]  # 供应商与顾客的距离 改   3*7*3 读取数据库格式：读取数据库格式：按照AK排，每个订单 d 都一样
    P = [240, 230, 220, 210, 245, 235, 225,
         185, 198, 196, 175, 155, 175, 165,
         195, 165, 175, 150, 150, 190, 163,
         240, 230, 220, 210, 245, 235, 225,
         185, 198, 196, 175, 155, 175, 165,
         195, 165, 175, 150, 150, 190, 163,
         240, 230, 220, 210, 245, 235, 225,
         185, 198, 196, 175, 155, 175, 165,
         195, 165, 175, 150, 150, 190, 163
         ]  # 单价p    3*7*3  改   读取数据库格式：按照AK排，
    t = [146 , 132 , 122 ,
         140 , 120 , 130 ,
         120 , 130 , 150 ]  # 订单     Ri = 400
    yunfei = 5  # 单位距离配送价格
    amin = [0] * M * Oir * O
    amax = [110 * 100, 110 * 100, 100 * 100, 100 * 100, 140 * 100, 125 * 100, 140 * 100,
            130 * 100, 170 * 100, 155 * 100, 110 * 100, 110 * 100, 120 * 100, 110 * 100,
            190* 100, 110 * 100, 115 * 100, 115 * 100, 110 * 100, 120 * 100, 120 * 100
            ]  # 改  3*7*3  读取数据库格式：100\200  之后再乘以100
    Co = [5 * 24,4 * 24,5 * 24]  #  3  需要增加时间条件
    Pir = [1, 2, 3,
           1, 2, 3,
           1, 2, 3]  # 3*3 需要增加优先级，工序
    mean_v = 90
    good_p = np.array([5.24959744, 10.78959422, 8.84181833, 40.32418595, 5.0165174, 22.42633472,
                       6.3847671, 5.73216712, 5.066344, 5.16240637, 9.21130136, 39.10845744,
                       6.32625664, 28.4067019, 5.01600659, 7.45698086, 12.43456253, 23.23068573, 34.4155452,
                       5.48714334, 11.01312505, 8.34729214, 40.49066999, 16.9625515,
                       13.36428185, 5.17530975, 7.95158742, 6.72807753, 7.26196279, 5.22171634
                          , 5.10605047, 6.74460108, 15.09387657, 39.06158359, 20.57678895, 5.01979423
                          , 5.99031298, 13.63275747, 32.82626417, 22.21654759, 5.08358577, 14.29102637
                          , 5.03912101, 5.6416357, 38.48462916, 16.01781318, 11.34773976, 5.00400576
                          , 17.47199347, 22.22081868, 6.45840683, 5.11171677, 32.85661843, 11.63611983
                          , 8.00485779, 12.8287266, 5.02016695, 8.58761759, 5.80082289, 21.97257134
                          , 24.55942164, 5.01334379, 28.06376107]
                      )
    return M, Oir,O, d, P, t, yunfei, amin, amax ,Co ,Pir ,mean_v,good_p

def init_data_m4():
    # 初始化数据
    M = 4
    Oir = 3 # 工序
    O = 3 # 订单数
    d = [185, 205, 220, 230,
         185, 205, 220, 230,
         185, 205, 220, 230,
         185, 205, 220, 230,
         185, 205, 220, 230,
         185, 205, 220, 230,
         185, 205, 220, 230,
         185, 205, 220, 230,
         185, 205, 220, 230
          ]  # 供应商与顾客的距离 改   3*7*3 读取数据库格式：读取数据库格式：按照AK排，每个订单 d 都一样
    P = [240, 230, 220, 210,
         185, 198, 196, 175,
         195, 165, 175, 150,
         240, 230, 220, 210,
         185, 198, 196, 175,
         195, 165, 175, 150,
         240, 230, 220, 210,
         185, 198, 196, 175,
         195, 165, 175, 150
         ]  # 单价p    3*7*3  改   读取数据库格式：按照AK排，
    t = [146 , 132 , 122 ,
         140 , 120 , 130 ,
         120 , 130 , 150 ]  # 订单     3*3  改
    yunfei = 5  # 单位距离配送价格
    amin = [0] * M * Oir * O
    # amax = [110 * 100, 110 * 100, 100 * 100, 100 * 100,
    #         130 * 100, 170 * 100, 155 * 100, 110 * 100,
    #         190* 100, 110 * 100, 115 * 100, 115 * 100
    #         ]  # 改  3*7*3  读取数据库格式：100\200  之后再乘以100
    amax = [110 , 110 , 100 , 100 ,
            130 , 170 , 155 , 110 ,
            190 , 110 , 115 , 115
            ]  # 改  3*7*3  读取数据库格式：100\200  之后再乘以100
    Co = [5 * 24,4 * 24,5 * 24]  #  3  需要增加时间条件
    Pir = [1, 2, 3,
           1, 2, 3,
           1, 2, 3]  # 3*3 需要增加优先级，工序
    mean_v = 90
    good_p = np.array([5.24959744, 10.78959422, 8.84181833, 40.32418595,
                       5.73216712, 5.066344, 5.16240637, 9.21130136,
                       5.01600659, 7.45698086, 12.43456253, 23.23068573,
                       8.34729214, 40.49066999, 16.9625515, 13.36428185,
                       5.17530975, 7.95158742, 6.72807753, 7.26196279,
                       15.09387657, 39.06158359, 20.57678895, 5.01979423,
                       22.21654759, 5.08358577, 14.29102637, 5.03912101,
                       5.6416357, 38.48462916, 16.01781318, 11.34773976,
                       6.45840683, 5.11171677, 32.85661843, 11.63611983
                       ]
                      )
    return M, Oir,O, d, P, t, yunfei, amin, amax ,Co ,Pir ,mean_v,good_p

def init_data_m100():
    # 初始化数据
    M = 100
    Oir = 1 # 工序
    O = 1 # 订单数
    d = [282, 220, 206, 188, 201, 205, 128, 189, 290, 116, 219, 156, 180, 149, 161, 146, 252, 237, 134, 173, 214, 199, 217,
     139, 123, 148, 246, 128, 283, 232, 110, 262, 166, 171, 200, 180, 247, 254, 237, 204, 266, 104, 274, 186, 221, 146,
     268, 213, 260, 269, 171, 185, 247, 233, 268, 132, 275, 147, 254, 159, 293, 241, 159, 268, 139, 283, 197, 297, 145,
     247, 167, 247, 298, 145, 142, 225, 284, 117, 207, 197, 142, 256, 204, 233, 169, 151, 185, 285, 136, 181, 129, 268,
     206, 253, 174, 174, 132, 192, 111, 133]

    P = [284, 170, 175, 223, 263, 168, 291, 217, 184, 173, 150, 224, 216, 159, 132, 158, 146, 150, 162, 269, 224, 177, 159,
     162, 212, 229, 290, 157, 165, 128, 220, 141, 284, 175, 167, 136, 269, 217, 275, 210, 170, 246, 184, 191, 214, 100,
     138, 180, 266, 194, 203, 198, 201, 251, 288, 110, 236, 108, 246, 199, 103, 243, 189, 140, 268, 292, 135, 188, 294,
     140, 174, 159, 195, 296, 125, 246, 298, 101, 216, 236, 182, 226, 182, 163, 196, 208, 235, 236, 122, 256, 265, 211,
     199, 102, 213, 276, 286, 165, 250, 196]

    amax = [26500, 4000, 7200, 22000, 22600, 20700, 19800, 4800, 17200, 21500, 22000, 7600, 3000, 19100, 19200, 29500, 2700,
     11800, 18600, 23800, 25800, 27100, 13200, 29800, 9700, 14000, 5500, 25800, 2800, 9900, 23100, 6900, 7900, 1900,
     11300, 14000, 15000, 9100, 28100, 21500, 18200, 20900, 21900, 28700, 14000, 19900, 6800, 28800, 5100, 1600, 18500,
     26500, 3300, 10000, 8400, 27800, 25900, 2800, 11200, 24500, 5700, 23000, 27800, 28100, 12000, 6700, 6500, 24300,
     18600, 16000, 11000, 26400, 16000, 4300, 11000, 16100, 2900, 6600, 16900, 2400, 18100, 21100, 12500, 26800, 7500,
     11200, 4200, 26900, 16600, 2300, 20200, 27100, 15200, 6700, 6700, 22200, 19300, 20000, 29500, 1500]

    t = [2500]  # 订单     3*3  改
    yunfei = 5  # 单位距离配送价格
    amin = [0] * M * Oir * O
    # amax = [110 * 100, 110 * 100, 100 * 100, 100 * 100,
    #         130 * 100, 170 * 100, 155 * 100, 110 * 100,
    #         190* 100, 110 * 100, 115 * 100, 115 * 100
    #         ]  # 改  3*7*3  读取数据库格式：100\200  之后再乘以100

    Co = [5 * 24]  #  3  需要增加时间条件
    Pir = [3]  # 3*3 需要增加优先级，工序
    mean_v = 90
    good_p = np.array([0.010777575917909638, 0.6211068659048298, 0.18352504963161212, 0.0024239257637093297, 0.005117450034486052, 0.9932077984063856, 0.0348332241192406, 0.058279589065343355, 0.12900790148901858, 0.3374689399056977, 4.485434645583231, 0.08826781281922577, 0.08718587989058857, 4.2360184570217445, 4.471689553441932, 3.820780762730425, 0.5795395892474574, 4.473280364721373, 2.1441836016086278, 0.10000756237634435, 0.016682029810964713, 0.03460285760870896, 4.185841768414395, 0.15854267901514388, 0.0893924263316728, 0.07803304549393685, 0.03139523983969855, 4.060201392515901, 0.5328049874680771, 3.828543799105359, 0.04623195685050269, 2.6413991385912268, 0.04401984022963519, 0.385175328207989, 0.8364365114458738, 4.572586587606381, 0.025012982537485136, 0.056795616345212074, 0.010612998004356715, 0.08531539692824512, 0.3446683957622353, 0.02100216698479399, 0.14144583254218832, 0.23069356429220672, 0.1093377885388768, 4.667173707247198, 2.4679544300268104, 0.19388177327348255, 0.029024683248766517, 0.07658423889585528, 0.04058685318708132, 0.13531489227367768, 0.0643030462421994, 0.032080431036769455, 0.05459622480512588, 4.703228791443264, 0.04909007027831144, 1.0574363353163767, 0.02493253553050458, 0.15075089821768028, 2.116958989489347, 0.055519614278053186, 0.1230825579545177, 4.3355266326904145, 0.036858783033929914, 0.0578511171520666, 2.465219950319004, 0.1560406956571214, 0.03622393996232785, 4.581273669315996, 0.12211950405565261, 1.8130491070561972, 0.13156169203291215, 0.003869139727757202, 4.224409948327513, 0.02858581900254179, 0.024727506943816927, 2.516326163709612, 0.12177601850232221, 0.0285484060806406, 0.06454300319970367, 0.0885525891184007, 0.16418248561547016, 3.423387231644751, 0.13289303722866994, 0.14304559882051696, 0.05550375616789419, 0.0023402684767587847, 4.680028631551479, 0.044412366411324275, 0.025859798461645586, 0.12442615093045975, 0.03791139003547658, 2.602720833670518, 0.03831681585006507, 0.007808766127327343, 0.03217606543389975, 1.188380903089455, 0.014626479827642463, 0.057050117916430235]
)
#     good_p = np.array([100, 40.9508636376134, 18.017426940802437, 46.07106593974378, 32.63777559786818, 99.158888823646, 44.300384147996105, 4.844497017027505, 49.93769895110728, 12.057929117112154, 81.48150359326426, 78.07174110925413, 7.882231456407062, 87.58420487883961, 60.51017183672064, 55.003888002067, 98.28472925610232, 82.21297559363934, 74.03922993156411, 27.010820696645553, 34.432159891011935, 52.9892416184935, 4.139233134655662, 3.3445717409367526, 15.968896661726905, 50.274846492075376, 94.29110837914901, 94.43854593276227, 53.669996540844956, 58.60309835743639, 12.943709856773589, 80.49253520572384, 86.26452996343318, 59.04827315706329, 64.69782864707663, 29.09526390766619, 79.5031252042871, 35.08029767240001, 6.05061547603396, 97.60610560265502, 22.80507648103335, 56.32898147413927, 85.09679390664388, 20.438503042065136, 30.039623332463183, 63.01428053990645, 71.69002277025129, 82.47371319844522, 27.465363597787608, 16.9342698679273, 34.718926202067244, 61.136234239635634, 65.87865179848895, 59.32195292769917, 28.745911270029744, 76.95351358271829, 15.093761054581678, 40.034886718675175, 17.35455338227704, 12.841637826372898, 6.716350451746744, 95.56046442900187, 88.18104975345548, 55.40408346166624, 27.243930812351735, 45.1682599706297, 35.68763713509119, 87.2623999239824, 26.86781446787887, 42.00464630429541, 91.04278758919887, 34.0746271311142, 8.214716607478623, 35.62203500368051, 82.97097626474957, 20.28027815863712, 49.98997829532704, 57.18513267931253, 35.95906836160109, 45.765295020484146, 84.56228958617683, 38.99525781024947, 24.99021486075026, 33.74447152387457, 64.33344803422627, 95.98532607946125, 46.943894523195404, 89.37941630739313, 88.41114375962648, 60.87235314692524, 70.7945700458001, 66.78795520043266, 71.34292152318025, 99.87732801129387, 40.96508701347342, 69.29602975776722, 54.2464672836101, 56.665685976655524, 25.650907469756678, 23.884900391731378]
# )

    return M, Oir,O, d, P, t, yunfei, amin, amax ,Co ,Pir ,mean_v,good_p
def init_data_m150():
    # 初始化数据
    M = 150
    Oir = 1 # 工序
    O = 1 # 订单数
    d = [184, 211, 279, 155, 187, 104, 258, 255, 244, 277, 270, 121, 282, 190, 127, 299, 284, 227, 232, 207, 215, 181, 294, 258, 235, 189, 140, 153, 112, 291, 193, 100, 287, 121, 233, 268, 176, 150, 242, 124, 235, 116, 197, 223, 266, 189, 119, 173, 128, 164, 154, 227, 272, 246, 226, 268, 138, 140, 237, 147, 166, 227, 292, 168, 207, 298, 249, 138, 178, 163, 117, 227, 188, 220, 120, 160, 293, 135, 284, 265, 272, 242, 247, 180, 126, 106, 145, 135, 102, 226, 145, 186, 129, 241, 234, 168, 232, 165, 260, 182, 177, 119, 172, 215, 283, 104, 281, 191, 180, 155, 231, 261, 177, 119, 287, 211, 124, 130, 105, 150, 124, 298, 153, 102, 211, 120, 133, 197, 143, 222, 276, 236, 274, 138, 237, 139, 282, 127, 180, 255, 160, 102, 154, 272, 110, 291, 150, 266, 143, 103]


    P = [175, 248, 247, 101, 212, 185, 133, 205, 221, 167, 175, 215, 129, 271, 103, 248, 198, 292, 101, 102, 293, 216, 255, 292, 129, 206, 102, 202, 116, 156, 171, 116, 195, 210, 187, 258, 162, 149, 214, 270, 157, 128, 100, 265, 260, 156, 189, 172, 147, 162, 112, 142, 299, 197, 206, 185, 135, 120, 101, 193, 147, 279, 229, 173, 115, 139, 169, 205, 238, 285, 151, 120, 152, 130, 248, 255, 228, 231, 179, 191, 123, 276, 149, 155, 185, 232, 297, 194, 115, 177, 143, 177, 263, 285, 134, 293, 113, 104, 206, 221, 145, 191, 294, 207, 133, 181, 183, 186, 102, 214, 107, 126, 182, 175, 187, 252, 147, 137, 178, 295, 168, 216, 107, 153, 278, 240, 216, 134, 235, 106, 181, 168, 214, 238, 200, 283, 164, 208, 274, 119, 125, 127, 159, 144, 233, 109, 270, 259, 255, 138]


    amax = [1100, 20600, 26800, 21200, 3100, 27500, 20000, 19400, 24900, 29600, 5200, 20700, 22100, 11700, 13900, 12700, 26300, 11100, 6600, 5300, 17700, 8400, 12300, 24100, 7600, 10500, 19400, 4900, 9600, 28000, 28700, 1900, 29500, 26700, 17300, 29700, 6500, 11400, 29300, 6400, 8000, 25700, 25100, 16200, 2700, 14800, 9100, 11900, 15900, 20700, 18200, 3700, 26300, 18300, 14700, 12400, 13900, 10400, 18700, 20500, 18400, 15000, 22500, 11300, 9000, 16600, 4400, 7200, 21100, 25100, 12700, 23300, 19700, 16500, 25200, 15400, 18400, 17800, 15800, 15300, 2100, 26200, 2900, 14200, 14600, 18900, 6400, 5500, 21300, 21800, 27600, 8800, 9900, 17400, 18800, 17500, 16300, 13300, 6400, 16700, 24600, 10700, 23500, 14000, 6900, 28700, 20500, 14400, 26700, 4700, 2100, 25000, 23900, 11000, 3700, 22900, 16200, 22500, 27800, 6100, 9200, 28400, 11300, 7700, 15100, 25600, 29600, 20800, 11800, 26600, 8200, 24600, 15000, 25800, 27100, 29700, 5700, 25800, 26500, 6500, 3400, 19600, 27000, 28800, 1200, 8000, 21900, 24400, 19100, 17600]


    t = [2500*1.5]  # 订单     3*3  改
    yunfei = 5  # 单位距离配送价格
    amin = [0] * M * Oir * O
    # amax = [110 * 100, 110 * 100, 100 * 100, 100 * 100,
    #         130 * 100, 170 * 100, 155 * 100, 110 * 100,
    #         190* 100, 110 * 100, 115 * 100, 115 * 100
    #         ]  # 改  3*7*3  读取数据库格式：100\200  之后再乘以100

    Co = [5 * 24*1.5]  #  3  需要增加时间条件
    Pir = [3]  # 3*3 需要增加优先级，工序
    mean_v = 90
    good_p = np.array([50, 12, 18, 16, 35, 96, 57, 86, 50, 26, 41, 53, 19, 32, 78, 19, 49, 22, 57, 33, 5, 58, 27, 30, 46, 10, 57, 47, 18, 96, 93, 46, 79, 51, 98, 43, 24, 38, 11, 81, 39, 45, 15, 8, 18, 26, 58, 31, 32, 17, 9, 8, 82, 60, 82, 20, 5, 46, 50, 47, 38, 77, 0, 5, 58, 17, 33, 35, 36, 83, 49, 60, 88, 43, 6, 43, 68, 47, 18, 62, 70, 55, 82, 62, 78, 80, 71, 20, 8, 9, 44, 40, 88, 31, 90, 56, 55, 43, 57, 98, 95, 5, 81, 32, 93, 26, 35, 86, 81, 35, 36, 43, 7, 22, 15, 6, 99, 89, 14, 59, 26, 24, 68, 93, 17, 97, 50, 93, 15, 56, 17, 71, 29, 9, 99, 51, 2, 46, 5, 88, 78, 48, 39, 47, 74, 49, 31, 85, 26, 96]
)
#     good_p = np.array([100, 40.9508636376134, 18.017426940802437, 46.07106593974378, 32.63777559786818, 99.158888823646, 44.300384147996105, 4.844497017027505, 49.93769895110728, 12.057929117112154, 81.48150359326426, 78.07174110925413, 7.882231456407062, 87.58420487883961, 60.51017183672064, 55.003888002067, 98.28472925610232, 82.21297559363934, 74.03922993156411, 27.010820696645553, 34.432159891011935, 52.9892416184935, 4.139233134655662, 3.3445717409367526, 15.968896661726905, 50.274846492075376, 94.29110837914901, 94.43854593276227, 53.669996540844956, 58.60309835743639, 12.943709856773589, 80.49253520572384, 86.26452996343318, 59.04827315706329, 64.69782864707663, 29.09526390766619, 79.5031252042871, 35.08029767240001, 6.05061547603396, 97.60610560265502, 22.80507648103335, 56.32898147413927, 85.09679390664388, 20.438503042065136, 30.039623332463183, 63.01428053990645, 71.69002277025129, 82.47371319844522, 27.465363597787608, 16.9342698679273, 34.718926202067244, 61.136234239635634, 65.87865179848895, 59.32195292769917, 28.745911270029744, 76.95351358271829, 15.093761054581678, 40.034886718675175, 17.35455338227704, 12.841637826372898, 6.716350451746744, 95.56046442900187, 88.18104975345548, 55.40408346166624, 27.243930812351735, 45.1682599706297, 35.68763713509119, 87.2623999239824, 26.86781446787887, 42.00464630429541, 91.04278758919887, 34.0746271311142, 8.214716607478623, 35.62203500368051, 82.97097626474957, 20.28027815863712, 49.98997829532704, 57.18513267931253, 35.95906836160109, 45.765295020484146, 84.56228958617683, 38.99525781024947, 24.99021486075026, 33.74447152387457, 64.33344803422627, 95.98532607946125, 46.943894523195404, 89.37941630739313, 88.41114375962648, 60.87235314692524, 70.7945700458001, 66.78795520043266, 71.34292152318025, 99.87732801129387, 40.96508701347342, 69.29602975776722, 54.2464672836101, 56.665685976655524, 25.650907469756678, 23.884900391731378]
# )

    return M, Oir,O, d, P, t, yunfei, amin, amax ,Co ,Pir ,mean_v,good_p
def init_data_m200():
    # 初始化数据
    M = 100
    Oir = 1 # 工序
    O = 1 # 订单数
    d = [180, 289, 239, 183, 139, 195, 145, 223, 112, 296, 228, 210, 198, 214, 127, 169, 197, 296, 133, 191, 186, 132, 160, 227, 109, 296, 266, 260, 105, 287, 298, 191, 148, 105, 136, 175, 126, 282, 210, 282, 133, 155, 250, 159, 158, 283, 198, 251, 255, 229, 136, 162, 290, 278, 189, 140, 232, 240, 269, 117, 199, 235, 114, 111, 164, 229, 252, 295, 240, 226, 204, 175, 106, 246, 214, 159, 284, 296, 252, 262, 112, 289, 161, 183, 174, 114, 208, 280, 126, 274, 266, 157, 129, 233, 191, 104, 186, 179, 285, 271, 108, 166, 131, 257, 239, 284, 293, 171, 137, 155, 124, 155, 199, 129, 271, 156, 135, 260, 270, 265, 297, 282, 214, 269, 170, 234, 264, 195, 123, 216, 289, 154, 101, 298, 254, 199, 109, 197, 177, 255, 284, 123, 252, 225, 116, 108, 235, 197, 158, 212, 171, 157, 119, 153, 292, 130, 154, 296, 205, 251, 227, 171, 260, 157, 270, 183, 125, 197, 257, 137, 254, 218, 240, 162, 156, 159, 103, 235, 236, 248, 137, 202, 150, 137, 112, 282, 207, 137, 263, 165, 146, 163, 247, 206, 200, 282, 149, 263, 241, 157]


    P = [206, 293, 108, 279, 257, 108, 146, 265, 104, 189, 281, 198, 282, 276, 186, 241, 295, 117, 294, 161, 118, 240, 172, 129, 299, 257, 123, 129, 209, 185, 109, 140, 271, 264, 255, 249, 104, 234, 256, 169, 181, 157, 107, 121, 237, 119, 140, 274, 239, 287, 258, 141, 117, 230, 111, 269, 188, 178, 146, 230, 276, 299, 237, 137, 299, 135, 267, 251, 154, 117, 146, 110, 113, 123, 205, 264, 261, 221, 184, 201, 204, 115, 286, 186, 264, 216, 129, 177, 157, 152, 125, 109, 246, 196, 193, 176, 212, 205, 180, 197, 144, 263, 296, 113, 199, 128, 256, 120, 260, 270, 200, 199, 187, 150, 206, 144, 164, 106, 144, 185, 129, 186, 283, 249, 202, 160, 238, 197, 226, 268, 140, 168, 180, 223, 256, 235, 283, 129, 258, 194, 135, 126, 273, 279, 263, 286, 100, 173, 129, 213, 122, 284, 182, 288, 288, 147, 115, 228, 254, 175, 176, 242, 206, 222, 156, 213, 255, 123, 268, 134, 261, 222, 256, 217, 102, 253, 251, 162, 201, 111, 211, 213, 223, 138, 129, 196, 287, 234, 278, 181, 271, 164, 292, 217, 225, 244, 182, 259, 218, 246]


    amax = [27200, 11700, 11200, 12300, 10500, 16500, 2400, 4600, 28300, 28600, 20900, 21200, 18900, 18400, 28800, 6400, 22500, 25700, 12500, 19000, 12400, 3400, 7700, 16900, 29000, 27000, 16600, 29300, 6000, 29900, 2300, 4900, 24200, 28900, 17400, 21200, 16200, 1800, 23900, 15700, 20400, 8200, 24000, 10700, 7300, 29100, 26500, 22900, 10600, 13200, 23800, 6800, 9400, 25600, 7300, 25100, 29200, 16000, 25800, 16200, 18200, 26000, 28000, 9700, 25100, 22500, 13400, 17000, 25300, 10100, 26300, 14700, 14100, 10200, 5900, 10800, 5200, 20200, 23200, 20000, 22500, 2400, 23300, 19100, 17100, 15900, 18300, 23200, 29900, 18900, 4900, 5800, 28100, 5200, 7300, 28600, 19600, 19800, 6900, 22600, 2400, 7400, 14600, 15500, 29800, 2900, 3200, 9900, 20000, 22400, 14000, 3400, 12500, 12300, 14100, 15000, 28700, 22100, 4000, 4200, 20700, 9600, 10900, 9700, 12400, 17900, 9000, 25600, 1700, 21000, 29600, 7700, 26100, 21600, 15400, 26200, 5200, 18100, 1100, 1700, 12400, 28100, 29800, 17800, 7500, 29100, 3300, 15500, 20500, 13400, 29000, 10200, 14500, 5200, 5800, 4900, 21200, 20300, 24900, 23600, 22100, 29700, 19600, 9200, 17100, 5300, 26600, 27600, 27800, 13900, 8700, 8000, 21900, 13600, 6300, 15200, 22000, 14900, 19300, 20000, 5000, 15400, 18400, 16200, 18900, 27600, 23900, 7800, 15900, 5200, 7300, 22000, 25700, 7400, 25900, 24500, 22200, 18000, 1800, 5900]


    t = [2500*2]  # 订单     3*3  改
    yunfei = 5  # 单位距离配送价格
    amin = [0] * M * Oir * O
    # amax = [110 * 100, 110 * 100, 100 * 100, 100 * 100,
    #         130 * 100, 170 * 100, 155 * 100, 110 * 100,
    #         190* 100, 110 * 100, 115 * 100, 115 * 100
    #         ]  # 改  3*7*3  读取数据库格式：100\200  之后再乘以100

    Co = [5 * 24*2]  #  3  需要增加时间条件
    Pir = [3]  # 3*3 需要增加优先级，工序
    mean_v = 90
    good_p = np.array([34, 35, 33, 63, 3, 11, 21, 53, 6, 38, 20, 23, 28, 1, 89, 66, 66, 63, 88, 83, 47, 89, 38, 77, 16, 13, 81, 87, 34, 52, 52, 73, 59, 43, 79, 53, 9, 26, 57, 10, 25, 66, 1, 77, 64, 48, 80, 9, 8, 55, 25, 37, 73, 87, 67, 14, 46, 2, 11, 12, 63, 72, 54, 93, 13, 5, 79, 84, 57, 27, 7, 54, 27, 85, 2, 25, 7, 96, 73, 9, 79, 35, 87, 23, 14, 47, 15, 43, 62, 39, 67, 97, 47, 49, 71, 38, 16, 45, 15, 93, 2, 78, 69, 23, 60, 56, 48, 7, 89, 15, 32, 58, 27, 22, 64, 49, 67, 18, 53, 52, 88, 27, 85, 16, 80, 59, 73, 90, 74, 39, 53, 1, 50, 28, 42, 48, 45, 27, 57, 21, 5, 54, 46, 22, 69, 15, 82, 88, 59, 24, 73, 94, 72, 81, 2, 88, 79, 74, 83, 66, 8, 23, 32, 66, 93, 72, 17, 88, 11, 44, 87, 52, 66, 89, 54, 76, 46, 71, 43, 66, 54, 54, 47, 75, 60, 12, 15, 24, 56, 10, 25, 45, 38, 16, 64, 69, 81, 82, 71, 26]
)
#     good_p = np.array([100, 40.9508636376134, 18.017426940802437, 46.07106593974378, 32.63777559786818, 99.158888823646, 44.300384147996105, 4.844497017027505, 49.93769895110728, 12.057929117112154, 81.48150359326426, 78.07174110925413, 7.882231456407062, 87.58420487883961, 60.51017183672064, 55.003888002067, 98.28472925610232, 82.21297559363934, 74.03922993156411, 27.010820696645553, 34.432159891011935, 52.9892416184935, 4.139233134655662, 3.3445717409367526, 15.968896661726905, 50.274846492075376, 94.29110837914901, 94.43854593276227, 53.669996540844956, 58.60309835743639, 12.943709856773589, 80.49253520572384, 86.26452996343318, 59.04827315706329, 64.69782864707663, 29.09526390766619, 79.5031252042871, 35.08029767240001, 6.05061547603396, 97.60610560265502, 22.80507648103335, 56.32898147413927, 85.09679390664388, 20.438503042065136, 30.039623332463183, 63.01428053990645, 71.69002277025129, 82.47371319844522, 27.465363597787608, 16.9342698679273, 34.718926202067244, 61.136234239635634, 65.87865179848895, 59.32195292769917, 28.745911270029744, 76.95351358271829, 15.093761054581678, 40.034886718675175, 17.35455338227704, 12.841637826372898, 6.716350451746744, 95.56046442900187, 88.18104975345548, 55.40408346166624, 27.243930812351735, 45.1682599706297, 35.68763713509119, 87.2623999239824, 26.86781446787887, 42.00464630429541, 91.04278758919887, 34.0746271311142, 8.214716607478623, 35.62203500368051, 82.97097626474957, 20.28027815863712, 49.98997829532704, 57.18513267931253, 35.95906836160109, 45.765295020484146, 84.56228958617683, 38.99525781024947, 24.99021486075026, 33.74447152387457, 64.33344803422627, 95.98532607946125, 46.943894523195404, 89.37941630739313, 88.41114375962648, 60.87235314692524, 70.7945700458001, 66.78795520043266, 71.34292152318025, 99.87732801129387, 40.96508701347342, 69.29602975776722, 54.2464672836101, 56.665685976655524, 25.650907469756678, 23.884900391731378]
# )

    return M, Oir,O, d, P, t, yunfei, amin, amax ,Co ,Pir ,mean_v,good_p
if __name__ == '__main__':
    M, Oir, O, d, P, t, yunfei, amin, amax, Co, Pir, mean_v, good_p = init_data_m100()
    M = 200
    d = np.random.randint(100,300,(M))
    P = np.random.randint(100,300,(M))
    amax = np.random.randint(10,300,(M))*100
    good_p = np.random.randint(0, 100, (M))
    print(d.tolist())
    print(P.tolist())
    print(amax.tolist())
    print(good_p.tolist())
    print("-"*10)
    l1, l2, l3 = 900, 300, 500


    def fitness(X):
        '''
        目标函数
        '''
        # 生成距离决策矩阵
        global D2
        D2 = []
        for x in X:
            if x > 0:
                D2.append(1)
            else:
                D2.append(0)
        # define list
        D2 = np.asarray(D2)
        D2 = np.array(D2, dtype=int)
        global gongShi  # 工时=比例*订单加工总数
        gongShi = [] * O * M * Oir
        temp = 0
        temp2 = 0
        for i in range(O):
            for j in range(Oir):
                tem = [0] * M  # 临时子工时
                tem[i] = np.multiply(X[0 + temp:M + temp], t[j + temp2])
                gongShi.extend(tem[i])
                temp += M
            temp2 += Oir
        f1 = np.dot(gongShi, P[:O * M * Oir])
        f2 = np.dot(D2, d[:O * M * Oir])
        f = f1 + f2 * yunfei * 100  # 计算目标函数值, 生产费用 = 工时*报价，运输费用=单位距离运费*距离决策矩阵*距离
        f = f / 100
        f = all_e(X, l1, l2, l3) + f
        # print('f = ', f)
        return f


    def calc_e1(X):
        """
        计算第一个约束的惩罚项
        计算群体惩罚项，X 的维度是 size * 8
        等式约束：每个订单工序分配给供应商的比例总数等于100
        """
        e1 = [0] * O * Oir
        temp = 0
        temp2 = 0
        for i in range(O):
            for j in range(Oir):
                e1[j + temp2] = (np.abs(X[temp:M + temp].sum() - 100)) * 1
                if (np.abs(X[temp:M + temp].sum() - 100) < 1):
                    e1[j + temp2] = 0
                temp += M
            temp2 += Oir
        ds_error1 = sum(e1)
        # print('e1:', e1)
        return ds_error1


    def calc_e2(X):
        """
        计算第二个约束的惩罚项
        不等式约束：分配的工时，不能超过供应商剩余能力上下限
        """
        e2 = []
        temp = 0

        count = O
        for k in range(Oir):

            for j in range(M):
                r_gongshi_sum = 0
                while (count > 0):
                    r_gongshi_sum += np.multiply(t[k + O * (count - 1)], X[j + M * Oir * (count - 1) + temp])
                    count -= 1
                count = O
                if (r_gongshi_sum) >= amax[j + temp]:
                    # 如果该加工时数大于于规定最大值 bv
                    e2.append(1 * (r_gongshi_sum - amax[j + temp]))
                else:
                    e2.append(0)
            temp += M

        bds_e = sum(e2)
        # print('e2:', e2,"sum(e2):" ,bds_e/100 )
        return bds_e / 100


    def calc_e3(X):
        '''
        计算第三个个约束的惩罚项  时间约束惩罚项
        不等式约束：加工时间+运输时间 不能超过订单周期Co
        '''
        # 生成距离决策矩阵
        global D2
        D2 = []
        temp = 0
        for i in range(O):
            for _ in range(Oir):
                for j in range(M):
                    if X[j + temp] > 0:
                        D2.append(1)
                    else:
                        D2.append(0)
                temp += M
        # define list
        D2 = np.asarray(D2)
        D2 = np.array(D2, dtype=int)
        global gongShi  # 工时=比例*订单加工总数
        gongShi = [] * O * M * Oir
        temp = 0
        temp2 = 0
        for i in range(O):
            for j in range(Oir):
                tem = [0] * M  # 临时子工时
                tem[i] = np.multiply(X[0 + temp:M + temp], t[j + temp2])
                gongShi.extend(tem[i])
                temp += M
            temp2 += Oir
        # DT 运输时间 = 距离/平均速度
        DT = np.divide(D2 * d[:O * M * Oir], mean_v)
        DT = np.multiply(DT, 100)

        CT = DT + gongShi
        CT = np.asarray(CT)
        ct_max = [0] * O
        e3 = [0] * O
        for i in range(O):
            ct_max[i] = np.max(CT[Oir * M * i:Oir * M * (i + 1)]) / 100
            if (Co[i] - ct_max[i] >= 0):
                e3[i] = 0
            else:
                e3[i] = (ct_max[i] - Co[i]) * 1

        # print('e3:', e3)
        # if all(i < 0.1 for i in e3):
        #     return 0
        return sum(e3)


    def all_e(x, l1, l2, l3):
        '''
        罚函数系数
        :param x:
        :return:
        '''
        return l1 * calc_e1(x) + l2 * calc_e2(x) + l3 * calc_e3(x)

    def constraints(x):
        return 0

    print(good_p)
    print(fitness(good_p))
    print(calc_e1(good_p))
    print(calc_e2(good_p))
    print(calc_e3(good_p))
