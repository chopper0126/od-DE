'''
订单分配初始化数据
'''
import numpy as np

'''
    O ,M ,Oir 
    p*n*m
    3*7*3
    3*10*3
    3*20*3
    2*20*2
    2*30*2
    2*50*2
    1*60*1
    1*100*1
    1*150*1
    1*200*1
'''
def init_data():
    '''
    e1实验数据
    '''
    # 初始化数据
    O, M, Oir = 3, 7, 3
    d = [185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241,
         185, 205, 220, 230, 130, 335, 241
          ]  # 供应商与顾客的距离 改   3*7*3 读取数据库格式：读取数据库格式：按照AK排，每个订单 d 都一样
    P = [240, 230, 220, 210, 245, 235, 225,
         185, 198, 196, 175, 155, 175, 165,
         195, 165, 175, 150, 150, 190, 163,
         240, 230, 220, 210, 245, 235, 225,
         185, 198, 196, 175, 155, 175, 165,
         195, 165, 175, 150, 150, 190, 163,
         240, 230, 220, 210, 245, 235, 225,
         185, 198, 196, 175, 155, 175, 165,
         195, 165, 175, 150, 150, 190, 163
         ]  # 单价p    3*7*3  改   读取数据库格式：按照AK排，
    t = [146 , 132 , 122 ,
         140 , 120 , 130 ,
         120 , 130 , 150 ]  # 订单     Ri = 400


    amax = [110 * 100, 110 * 100, 100 * 100, 100 * 100, 140 * 100, 125 * 100, 140 * 100,
            130 * 100, 170 * 100, 155 * 100, 110 * 100, 110 * 100, 120 * 100, 110 * 100,
            190* 100, 110 * 100, 115 * 100, 115 * 100, 110 * 100, 120 * 100, 120 * 100
            ]  # 改  3*7*3  读取数据库格式：100\200  之后再乘以100
    Co = [5 * 24,4 * 24,5 * 24]  #  3  需要增加时间条件
    Pir = [1, 2, 3,
           1, 2, 3,
           1, 2, 3]  # 3*3 需要增加优先级，工序

    good_p = np.array([4.841573415055974, 0.6339072358945023, 0.6421537048001201, 12.691325637848726, 10.371389053929061, 66.52742377128104, 3.3707498516154915, 0.14060496899097424, 0.15435366968495412, 0.11630950639061483, 16.82752018737975, 13.85431248070134, 0.336410200103301, 67.6338881207223, 0.09419380758800705, 21.82410033672956, 0.45649553825008865, 13.292578649339651, 0.09733985555744501, 0.8235725928508245, 62.53271374919887, 0.32206026652766234, 25.376128115821793, 13.189141825218835, 40.73445625620001, 0.14623981771158956, 1.627327637415006, 17.612542281649382, 4.9361938069952735, 21.1961129649931, 17.20463317604645, 22.098196734914474, 21.35046416434009, 5.756221433311353, 6.524963912179534, 1.5568843548413749, 3.8030360851512537, 25.209819384516518, 56.28321252013453, 0.5847612474086412, 0.030969750681684623, 11.716723062918865, 1.9515975653102926, 17.579014150318493, 11.782069519912405, 19.116701216182154, 9.477740879206936, 14.177002497223596, 24.94418195208242, 13.461401417190501, 2.4511884741588026, 3.49111821033141, 47.05193393669734, 18.60053966902879, 4.590334830955364, 9.436636196688276, 3.7320771981780143, 0.16520821557501986, 1.256850578654549, 16.627659826722443, 55.93599829949874, 6.601618897281788, 14.7908885085836]
                      )
    E = [3591500, 2672800, 4711500] # 总能源约束
    EC = [22, 47, 35, 18, 17, 7, 31,
          38, 12, 44, 17, 21, 19, 5,
          44, 19, 31, 27, 37, 17, 7]


    mean_v = 90
    yunfei = 5  # 单位距离配送价格
    amin = [0] * M * Oir * O
    return M, Oir,O, d, P, t, yunfei, amin, amax ,Co ,Pir ,mean_v,good_p,E,EC
def init_data_e2():
    '''
    e2实验数据
    '''
    O, M, Oir = 3, 10, 3
    d = [127, 138, 173, 211, 191, 229, 161, 184, 290, 115, 127, 138, 173, 211, 191, 229, 161, 184, 290, 115, 127, 138,
         173, 211, 191, 229, 161, 184, 290, 115, 127, 138, 173, 211, 191, 229, 161, 184, 290, 115, 127, 138, 173, 211,
         191, 229, 161, 184, 290, 115, 127, 138, 173, 211, 191, 229, 161, 184, 290, 115, 127, 138, 173, 211, 191, 229,
         161, 184, 290, 115, 127, 138, 173, 211, 191, 229, 161, 184, 290, 115, 127, 138, 173, 211, 191, 229, 161, 184,
         290, 115]
    P = [125, 101, 257, 186, 109, 275, 208, 133, 129, 281, 268, 279, 119, 183, 280, 282, 293, 148, 276, 296, 251, 189,
         220, 213, 213, 200, 206, 246, 183, 192, 125, 101, 257, 186, 109, 275, 208, 133, 129, 281, 268, 279, 119, 183,
         280, 282, 293, 148, 276, 296, 251, 189, 220, 213, 213, 200, 206, 246, 183, 192, 125, 101, 257, 186, 109, 275,
         208, 133, 129, 281, 268, 279, 119, 183, 280, 282, 293, 148, 276, 296, 251, 189, 220, 213, 213, 200, 206, 246,
         183, 192]
    amax = [28600, 26100, 10200, 26600, 26700, 23500, 13700, 29500, 13400, 12700, 21000, 27500, 19800, 15500, 17100,
            17000, 12800, 11600, 17800, 17900, 20100, 19100, 29300, 26700, 26300, 11500, 10300, 10600, 26500, 24800]

    good_p = np.array(
        [91, 52, 3, 87, 61, 64, 9, 92, 10, 64, 35, 63, 56, 30, 78, 93, 44, 91, 25, 95, 89, 72, 33, 30, 53, 86, 57, 28,
         26, 70, 35, 78, 45, 75, 70, 58, 90, 37, 14, 67, 7, 22, 83, 91, 98, 37, 21, 86, 55, 14, 68, 93, 60, 89, 5, 51,
         27, 89, 31, 42, 31, 26, 90, 84, 77, 16, 84, 86, 82, 68, 67, 74, 10, 81, 89, 56, 18, 35, 52, 35, 2, 96, 50, 94,
         29, 45, 20, 81, 13, 68])
    EC = [95, 58, 39, 57, 49, 52, 23, 12, 45, 49, 96, 97, 48, 31, 10, 40, 95, 68, 18, 79, 47, 27, 37, 84, 44, 87, 63,
          78, 46, 90]
    E = [404200, 444600, 493400]
    Co = [9* 24, 7* 24, 7* 24]
    t = [175, 152, 164, 171, 195, 139, 176, 189, 150]
    Pir = [1, 2, 2, 1, 2, 1, 1, 2, 2]

    mean_v = 90
    yunfei = 5  # 单位距离配送价格
    amin = [0] * M * Oir * O
  # 供应商对于不同资源的能耗  功率
    return M, Oir,O, d, P, t, yunfei, amin, amax ,Co ,Pir ,mean_v,good_p,E,EC
def init_data_e3():
    '''
    e3实验数据
    '''
    O, M, Oir = 3, 20, 3
    d = [201, 230, 140, 108, 251, 145, 208, 193, 194, 108, 133, 157, 156, 197, 107, 240, 208, 247, 189, 116, 201, 230,
         140, 108, 251, 145, 208, 193, 194, 108, 133, 157, 156, 197, 107, 240, 208, 247, 189, 116, 201, 230, 140, 108,
         251, 145, 208, 193, 194, 108, 133, 157, 156, 197, 107, 240, 208, 247, 189, 116, 201, 230, 140, 108, 251, 145,
         208, 193, 194, 108, 133, 157, 156, 197, 107, 240, 208, 247, 189, 116, 201, 230, 140, 108, 251, 145, 208, 193,
         194, 108, 133, 157, 156, 197, 107, 240, 208, 247, 189, 116, 201, 230, 140, 108, 251, 145, 208, 193, 194, 108,
         133, 157, 156, 197, 107, 240, 208, 247, 189, 116, 201, 230, 140, 108, 251, 145, 208, 193, 194, 108, 133, 157,
         156, 197, 107, 240, 208, 247, 189, 116, 201, 230, 140, 108, 251, 145, 208, 193, 194, 108, 133, 157, 156, 197,
         107, 240, 208, 247, 189, 116, 201, 230, 140, 108, 251, 145, 208, 193, 194, 108, 133, 157, 156, 197, 107, 240,
         208, 247, 189, 116]
    P = [169, 276, 107, 158, 277, 273, 166, 226, 202, 264, 153, 115, 168, 292, 226, 285, 250, 290, 182, 105, 104, 280,
         177, 280, 256, 136, 112, 254, 233, 220, 225, 214, 164, 126, 219, 287, 118, 149, 156, 283, 242, 151, 283, 207,
         278, 149, 167, 251, 155, 173, 109, 168, 297, 210, 207, 273, 251, 200, 261, 146, 169, 276, 107, 158, 277, 273,
         166, 226, 202, 264, 153, 115, 168, 292, 226, 285, 250, 290, 182, 105, 104, 280, 177, 280, 256, 136, 112, 254,
         233, 220, 225, 214, 164, 126, 219, 287, 118, 149, 156, 283, 242, 151, 283, 207, 278, 149, 167, 251, 155, 173,
         109, 168, 297, 210, 207, 273, 251, 200, 261, 146, 169, 276, 107, 158, 277, 273, 166, 226, 202, 264, 153, 115,
         168, 292, 226, 285, 250, 290, 182, 105, 104, 280, 177, 280, 256, 136, 112, 254, 233, 220, 225, 214, 164, 126,
         219, 287, 118, 149, 156, 283, 242, 151, 283, 207, 278, 149, 167, 251, 155, 173, 109, 168, 297, 210, 207, 273,
         251, 200, 261, 146]
    amax = [1700, 27100, 3600, 27500, 5000, 18600, 9600, 21800, 28300, 28800, 21200, 8500, 19000, 27500, 20500, 16200,
            2500, 18700, 12500, 15600, 28900, 26500, 24600, 8300, 9200, 15300, 29800, 21000, 11100, 28600, 26600, 19200,
            15400, 1000, 19900, 21100, 17900, 23000, 3800, 6500, 27800, 8300, 2700, 4100, 10800, 21100, 19000, 25100,
            1300, 5200, 28200, 4800, 20600, 13200, 13000, 7100, 3500, 18500, 16800, 11700]
    good_p = np.array(
        [7, 23, 71, 13, 75, 31, 89, 65, 66, 93, 85, 57, 64, 52, 79, 64, 81, 28, 97, 71, 68, 15, 4, 61, 75, 75, 83, 48,
         53, 48, 88, 48, 84, 55, 43, 34, 6, 13, 60, 34, 9, 99, 40, 4, 51, 3, 17, 20, 67, 18, 22, 39, 80, 48, 61, 12, 98,
         65, 74, 48, 20, 95, 26, 66, 79, 10, 4, 94, 11, 2, 20, 25, 44, 42, 5, 34, 88, 91, 51, 28, 67, 63, 48, 32, 14,
         63, 91, 76, 2, 22, 56, 15, 53, 94, 61, 74, 7, 22, 14, 11, 71, 93, 0, 29, 20, 53, 60, 82, 61, 11, 34, 91, 76,
         72, 71, 96, 32, 46, 42, 60, 55, 39, 42, 66, 76, 63, 97, 16, 43, 48, 91, 12, 65, 77, 82, 2, 26, 93, 74, 57, 39,
         64, 13, 70, 8, 80, 67, 62, 98, 4, 14, 87, 92, 17, 67, 6, 70, 71, 2, 5, 34, 18, 38, 96, 48, 54, 62, 8, 0, 56,
         51, 41, 21, 14, 42, 21, 94, 56, 79, 7])
    EC = [24, 98, 54, 41, 32, 23, 13, 60, 46, 92, 10, 23, 95, 15, 7, 14, 6, 94, 80, 52, 17, 17, 15, 30, 83, 26, 13, 33,
          37, 53, 9, 58, 74, 19, 54, 97, 30, 84, 62, 90, 15, 70, 33, 22, 33, 17, 90, 76, 42, 25, 89, 50, 47, 61, 68, 31,
          82, 27, 48, 48]
    E = [493300, 478000, 433700]
    Co = [8* 24, 9* 24, 9* 24]
    t = [137, 154, 186, 184, 145, 188, 157, 166, 188]
    Pir = [1, 2, 1, 1, 2, 2, 1, 1, 2]


    # -------------------- #
    mean_v = 90
    yunfei = 5  # 单位距离配送价格
    amin = [0] * M * Oir * O
  # 供应商对于不同资源的能耗  功率
    return M, Oir,O, d, P, t, yunfei, amin, amax ,Co ,Pir ,mean_v,good_p,E,EC
def init_data_e4():
    '''
    e4实验数据
    '''
    O, M, Oir = 2, 20, 2
    d = [252, 188, 243, 146, 282, 225, 189, 159, 291, 165, 209, 293, 126, 244, 294, 244, 189, 102, 213, 137, 252, 188,
         243, 146, 282, 225, 189, 159, 291, 165, 209, 293, 126, 244, 294, 244, 189, 102, 213, 137, 252, 188, 243, 146,
         282, 225, 189, 159, 291, 165, 209, 293, 126, 244, 294, 244, 189, 102, 213, 137, 252, 188, 243, 146, 282, 225,
         189, 159, 291, 165, 209, 293, 126, 244, 294, 244, 189, 102, 213, 137]
    P = [164, 151, 190, 214, 161, 113, 158, 164, 249, 284, 251, 132, 209, 227, 295, 166, 227, 138, 146, 183, 290, 221,
         133, 103, 133, 191, 213, 287, 261, 120, 242, 233, 153, 242, 116, 214, 205, 191, 159, 221, 164, 151, 190, 214,
         161, 113, 158, 164, 249, 284, 251, 132, 209, 227, 295, 166, 227, 138, 146, 183, 290, 221, 133, 103, 133, 191,
         213, 287, 261, 120, 242, 233, 153, 242, 116, 214, 205, 191, 159, 221]
    amax = [10500, 16900, 11200, 10600, 5800, 7700, 26700, 16300, 19900, 11100, 14500, 15900, 12100, 17500, 9200, 3900,
            16700, 19900, 28400, 17800, 13200, 25800, 3100, 14600, 16100, 22400, 8000, 24500, 12800, 22200, 3300, 27600,
            7300, 13800, 28900, 19500, 20500, 26200, 9000, 27800]
    good_p = np.array(
        [28, 54, 31, 19, 60, 66, 86, 60, 56, 60, 80, 45, 96, 4, 9, 65, 90, 58, 43, 63, 54, 48, 34, 86, 87, 36, 77, 47,
         12, 26, 51, 69, 44, 84, 99, 28, 8, 63, 16, 76, 27, 33, 82, 50, 74, 41, 49, 50, 30, 79, 83, 60, 8, 45, 10, 70,
         72, 66, 43, 16, 23, 86, 40, 59, 27, 42, 42, 22, 34, 0, 90, 92, 49, 99, 37, 98, 71, 63, 85, 36])
    EC = [43, 92, 50, 47, 91, 69, 19, 99, 91, 35, 18, 75, 66, 65, 64, 26, 92, 9, 30, 90, 17, 55, 18, 77, 7, 77, 29, 77,
          85, 68, 12, 83, 94, 82, 5, 15, 40, 99, 5, 83]
    E = [446500, 496700]
    Co = [9* 24, 5* 24]
    t = [251, 281, 228, 239]
    Pir = [2, 1, 2, 1]


    # -------------------- #
    mean_v = 90
    yunfei = 5  # 单位距离配送价格
    amin = [0] * M * Oir * O
  # 供应商对于不同资源的能耗  功率
    return M, Oir,O, d, P, t, yunfei, amin, amax ,Co ,Pir ,mean_v,good_p,E,EC
def init_data_e5():
    '''
    e5实验数据
    '''
    O, M, Oir = 2, 30, 2
    d = [161, 228, 263, 171, 299, 117, 285, 124, 117, 224, 202, 163, 295, 213, 271, 256, 299, 137, 213, 156, 106, 184,
         161, 295, 293, 280, 268, 190, 143, 108, 161, 228, 263, 171, 299, 117, 285, 124, 117, 224, 202, 163, 295, 213,
         271, 256, 299, 137, 213, 156, 106, 184, 161, 295, 293, 280, 268, 190, 143, 108, 161, 228, 263, 171, 299, 117,
         285, 124, 117, 224, 202, 163, 295, 213, 271, 256, 299, 137, 213, 156, 106, 184, 161, 295, 293, 280, 268, 190,
         143, 108, 161, 228, 263, 171, 299, 117, 285, 124, 117, 224, 202, 163, 295, 213, 271, 256, 299, 137, 213, 156,
         106, 184, 161, 295, 293, 280, 268, 190, 143, 108]
    P = [181, 103, 137, 248, 176, 265, 221, 226, 131, 117, 119, 189, 298, 156, 171, 103, 141, 142, 111, 117, 137, 109,
         182, 210, 246, 260, 253, 118, 207, 155, 228, 166, 211, 229, 139, 169, 143, 150, 210, 132, 115, 288, 251, 198,
         146, 216, 221, 122, 263, 225, 151, 222, 207, 262, 267, 273, 204, 231, 272, 121, 181, 103, 137, 248, 176, 265,
         221, 226, 131, 117, 119, 189, 298, 156, 171, 103, 141, 142, 111, 117, 137, 109, 182, 210, 246, 260, 253, 118,
         207, 155, 228, 166, 211, 229, 139, 169, 143, 150, 210, 132, 115, 288, 251, 198, 146, 216, 221, 122, 263, 225,
         151, 222, 207, 262, 267, 273, 204, 231, 272, 121]
    amax = [28400, 23600, 2500, 16800, 17500, 11400, 1100, 22100, 10900, 4200, 18600, 1900, 22100, 7900, 16500, 24600,
            2600, 20100, 13300, 10800, 1400, 21100, 14900, 7900, 12600, 16500, 7100, 29500, 2700, 10400, 3900, 9400,
            8000, 2600, 13200, 23900, 16400, 21900, 7600, 5900, 25600, 7900, 16600, 12700, 1700, 4700, 14800, 5900,
            6600, 17300, 24900, 22700, 2500, 28500, 28700, 21900, 6200, 22700, 11400, 17200]
    good_p = np.array(
        [87, 18, 62, 39, 98, 2, 48, 83, 81, 71, 35, 50, 95, 69, 22, 49, 14, 27, 15, 73, 18, 21, 76, 63, 72, 73, 1, 53,
         73, 69, 2, 84, 0, 85, 84, 19, 34, 25, 85, 18, 73, 46, 91, 11, 43, 20, 50, 3, 65, 39, 57, 98, 47, 92, 42, 59, 7,
         97, 3, 0, 3, 2, 87, 15, 28, 9, 59, 48, 99, 28, 13, 63, 30, 49, 84, 34, 21, 49, 41, 91, 41, 31, 55, 34, 38, 3,
         23, 32, 71, 44, 16, 76, 35, 55, 70, 94, 52, 75, 8, 30, 66, 25, 36, 82, 5, 90, 58, 0, 12, 94, 80, 77, 5, 29, 19,
         88, 91, 69, 34, 44])
    EC = [82, 15, 82, 48, 24, 63, 96, 12, 99, 72, 68, 49, 43, 65, 98, 60, 56, 50, 32, 47, 62, 78, 51, 60, 81, 46, 25,
          30, 81, 94, 35, 98, 46, 60, 28, 53, 24, 56, 70, 19, 49, 11, 85, 13, 83, 8, 37, 41, 95, 23, 79, 54, 26, 48, 27,
          54, 56, 34, 58, 68]
    E = [458000, 478700]
    Co = [9* 24, 9* 24]
    t = [265, 248, 223, 292]
    Pir = [2, 1, 1, 2]


    # -------------------- #
    mean_v = 90
    yunfei = 5  # 单位距离配送价格
    amin = [0] * M * Oir * O
  # 供应商对于不同资源的能耗  功率
    return M, Oir,O, d, P, t, yunfei, amin, amax ,Co ,Pir ,mean_v,good_p,E,EC
def init_data_e6():
    '''
    e6实验数据
    '''
    O, M, Oir = 2, 50, 2
    d = [164, 102, 239, 166, 241, 138, 137, 193, 196, 268, 191, 234, 295, 262, 120, 278, 154, 207, 202, 256, 139, 285,
         212, 130, 197, 129, 132, 124, 106, 111, 140, 234, 260, 186, 154, 213, 238, 168, 130, 253, 249, 175, 212, 217,
         293, 280, 103, 113, 203, 252, 164, 102, 239, 166, 241, 138, 137, 193, 196, 268, 191, 234, 295, 262, 120, 278,
         154, 207, 202, 256, 139, 285, 212, 130, 197, 129, 132, 124, 106, 111, 140, 234, 260, 186, 154, 213, 238, 168,
         130, 253, 249, 175, 212, 217, 293, 280, 103, 113, 203, 252, 164, 102, 239, 166, 241, 138, 137, 193, 196, 268,
         191, 234, 295, 262, 120, 278, 154, 207, 202, 256, 139, 285, 212, 130, 197, 129, 132, 124, 106, 111, 140, 234,
         260, 186, 154, 213, 238, 168, 130, 253, 249, 175, 212, 217, 293, 280, 103, 113, 203, 252, 164, 102, 239, 166,
         241, 138, 137, 193, 196, 268, 191, 234, 295, 262, 120, 278, 154, 207, 202, 256, 139, 285, 212, 130, 197, 129,
         132, 124, 106, 111, 140, 234, 260, 186, 154, 213, 238, 168, 130, 253, 249, 175, 212, 217, 293, 280, 103, 113,
         203, 252]
    P = [194, 122, 171, 235, 158, 208, 200, 110, 191, 224, 118, 105, 182, 229, 159, 208, 151, 190, 234, 112, 200, 104,
         132, 284, 289, 286, 169, 176, 133, 235, 276, 102, 144, 106, 190, 112, 103, 131, 147, 183, 132, 133, 164, 287,
         114, 153, 249, 241, 251, 275, 152, 144, 203, 273, 238, 169, 176, 166, 144, 101, 121, 145, 121, 139, 167, 113,
         130, 267, 233, 250, 127, 178, 247, 156, 263, 114, 117, 181, 198, 190, 235, 287, 222, 232, 101, 264, 147, 230,
         295, 230, 253, 126, 216, 273, 158, 232, 110, 110, 281, 127, 194, 122, 171, 235, 158, 208, 200, 110, 191, 224,
         118, 105, 182, 229, 159, 208, 151, 190, 234, 112, 200, 104, 132, 284, 289, 286, 169, 176, 133, 235, 276, 102,
         144, 106, 190, 112, 103, 131, 147, 183, 132, 133, 164, 287, 114, 153, 249, 241, 251, 275, 152, 144, 203, 273,
         238, 169, 176, 166, 144, 101, 121, 145, 121, 139, 167, 113, 130, 267, 233, 250, 127, 178, 247, 156, 263, 114,
         117, 181, 198, 190, 235, 287, 222, 232, 101, 264, 147, 230, 295, 230, 253, 126, 216, 273, 158, 232, 110, 110,
         281, 127]
    amax = [20300, 15200, 6700, 15700, 26100, 8700, 24500, 25000, 19900, 15300, 26400, 11100, 15700, 4300, 21200, 26500,
            29500, 29800, 3900, 1600, 4900, 1600, 28900, 21700, 7500, 6200, 8000, 20600, 1700, 11400, 2000, 22500,
            14400, 3800, 22900, 27100, 28500, 26800, 15300, 9900, 19700, 24100, 29000, 17600, 29300, 19000, 7600, 9800,
            28600, 3000, 21000, 9800, 29800, 22500, 20400, 15400, 10800, 21600, 11900, 27500, 21800, 2900, 12800, 9100,
            20500, 11600, 11900, 23100, 15900, 5500, 4900, 24900, 3100, 4900, 6400, 6000, 29700, 16100, 15300, 21500,
            7700, 3900, 29000, 21000, 6200, 14300, 25400, 7000, 20500, 29600, 9000, 5200, 25400, 15500, 2600, 14500,
            21600, 28100, 25900, 23500]
    good_p = np.array(
        [38, 13, 69, 33, 38, 19, 88, 73, 44, 16, 18, 69, 99, 40, 20, 33, 22, 17, 12, 21, 40, 35, 73, 47, 7, 28, 73, 4,
         24, 15, 10, 88, 76, 55, 32, 78, 71, 3, 96, 68, 65, 49, 59, 35, 94, 13, 84, 5, 70, 90, 97, 8, 70, 20, 77, 64,
         16, 67, 30, 91, 76, 28, 23, 19, 82, 96, 14, 11, 74, 8, 42, 26, 7, 59, 44, 1, 55, 53, 45, 11, 37, 48, 25, 30,
         66, 85, 47, 35, 10, 93, 8, 5, 78, 74, 38, 33, 20, 49, 73, 22, 60, 40, 47, 35, 16, 60, 25, 54, 54, 51, 79, 36,
         1, 97, 50, 40, 77, 80, 14, 50, 97, 66, 47, 51, 32, 80, 5, 60, 66, 41, 72, 49, 88, 53, 9, 76, 88, 78, 47, 96,
         23, 0, 98, 16, 53, 54, 95, 75, 2, 40, 21, 32, 46, 2, 8, 92, 34, 49, 5, 94, 69, 81, 1, 7, 26, 78, 50, 28, 5, 75,
         12, 67, 59, 37, 71, 0, 92, 92, 67, 99, 41, 82, 65, 14, 18, 16, 22, 90, 74, 8, 46, 96, 96, 43, 55, 37, 61, 19,
         24, 80])
    EC = [55, 29, 31, 55, 94, 62, 22, 74, 88, 94, 93, 96, 84, 23, 63, 58, 76, 67, 40, 36, 73, 7, 89, 98, 43, 67, 28, 68,
          89, 67, 91, 15, 6, 82, 36, 79, 19, 46, 33, 50, 66, 97, 7, 62, 17, 23, 89, 34, 49, 58, 49, 33, 79, 61, 37, 28,
          50, 55, 11, 90, 14, 31, 32, 27, 16, 56, 96, 83, 65, 77, 7, 86, 67, 11, 36, 23, 41, 55, 61, 46, 52, 28, 16, 91,
          28, 35, 69, 46, 26, 76, 12, 58, 98, 31, 61, 76, 95, 29, 78, 13]
    E = [466100, 412900]
    Co = [5* 24, 7* 24]
    t = [258, 262, 222, 262]
    Pir = [1, 1, 1, 1]

    # -------------------- #
    mean_v = 90
    yunfei = 5  # 单位距离配送价格
    amin = [0] * M * Oir * O
  # 供应商对于不同资源的能耗  功率
    return M, Oir,O, d, P, t, yunfei, amin, amax ,Co ,Pir ,mean_v,good_p,E,EC
def init_data_e7():
    '''
    e7实验数据
    '''
    O, M, Oir = 1, 60, 1
    d = [144, 230, 168, 130, 235, 170, 218, 180, 244, 188, 257, 141, 246, 180, 210, 113, 250, 278, 212, 148, 286, 152,
         202, 242, 155, 266, 282, 128, 137, 203, 276, 198, 244, 262, 134, 107, 233, 213, 208, 158, 129, 140, 176, 155,
         163, 227, 282, 233, 290, 100, 101, 271, 200, 134, 274, 296, 134, 290, 209, 132]
    P = [124, 268, 256, 207, 230, 238, 207, 151, 212, 186, 159, 167, 206, 238, 152, 125, 201, 279, 224, 178, 144, 278,
         148, 139, 289, 189, 133, 132, 102, 278, 131, 181, 209, 127, 248, 165, 111, 198, 221, 116, 250, 147, 284, 224,
         222, 142, 231, 129, 294, 234, 230, 262, 245, 211, 207, 143, 106, 231, 272, 214]
    amax = [1800, 10300, 4200, 23300, 28900, 18200, 8000, 1500, 7300, 17600, 22600, 22900, 29800, 27000, 23800, 17400,
            21400, 24200, 3700, 22400, 21300, 28300, 29300, 14200, 28400, 19200, 21900, 15000, 15700, 10900, 17900,
            1200, 28700, 17800, 10100, 26800, 21800, 28700, 22500, 4100, 18300, 8500, 12900, 2000, 26400, 10800, 17200,
            5800, 17600, 18400, 4800, 13500, 4300, 11500, 20400, 23200, 3900, 17800, 16600, 6100]
    good_p = np.array(
        [44, 62, 18, 84, 35, 78, 72, 57, 61, 23, 29, 87, 39, 61, 90, 30, 29, 4, 22, 0, 0, 4, 44, 39, 97, 81, 43, 5, 41,
         22, 17, 99, 41, 61, 30, 87, 73, 37, 58, 57, 66, 97, 77, 33, 40, 73, 95, 66, 22, 87, 66, 59, 92, 94, 64, 88, 96,
         59, 24, 69])
    EC = [93, 74, 21, 27, 7, 41, 48, 45, 8, 9, 37, 30, 44, 39, 25, 24, 37, 92, 69, 88, 20, 18, 70, 87, 93, 77, 83, 18,
          39, 97, 92, 96, 85, 22, 92, 62, 15, 57, 79, 63, 10, 69, 86, 42, 75, 34, 26, 11, 84, 83, 32, 88, 62, 82, 33,
          62, 75, 55, 95, 97]
    E = [423000]
    Co = [120]
    t = [449]
    Pir = [1]


    # -------------------- #
    mean_v = 90
    yunfei = 5  # 单位距离配送价格
    amin = [0] * M * Oir * O
  # 供应商对于不同资源的能耗  功率
    return M, Oir,O, d, P, t, yunfei, amin, amax ,Co ,Pir ,mean_v,good_p,E,EC
def init_data_e8():
    '''
    e8实验数据
    '''
    O, M, Oir = 1, 100, 1
    d = [141, 166, 235, 224, 224, 113, 294, 252, 155, 279, 255, 110, 177, 252, 178, 151, 103, 216, 292, 229, 159, 179,
         294, 113, 219, 264, 206, 180, 160, 103, 149, 123, 104, 126, 100, 146, 225, 116, 114, 244, 147, 164, 258, 251,
         105, 208, 199, 140, 235, 158, 173, 211, 198, 191, 167, 110, 298, 135, 192, 238, 223, 157, 104, 284, 176, 209,
         212, 100, 276, 192, 138, 225, 253, 116, 186, 157, 136, 205, 141, 108, 270, 132, 298, 202, 297, 134, 105, 261,
         298, 258, 150, 284, 113, 281, 294, 117, 121, 283, 150, 214]
    P = [247, 175, 264, 261, 253, 269, 249, 133, 280, 192, 166, 137, 246, 134, 153, 203, 136, 152, 159, 140, 203, 143,
         134, 133, 269, 196, 207, 185, 108, 260, 190, 233, 132, 291, 114, 217, 252, 141, 213, 181, 177, 122, 195, 198,
         165, 112, 102, 235, 270, 101, 243, 279, 193, 297, 126, 268, 237, 157, 129, 280, 194, 241, 286, 269, 114, 235,
         246, 278, 101, 135, 187, 111, 266, 110, 225, 270, 131, 267, 161, 254, 146, 124, 138, 231, 257, 184, 127, 154,
         198, 112, 297, 122, 120, 296, 122, 141, 156, 116, 123, 270]
    amax = [26400, 16800, 23700, 25700, 10300, 16300, 20400, 12000, 28900, 1600, 26100, 22800, 17700, 25500, 2900,
            13800, 9400, 18400, 1100, 26500, 14500, 22100, 15800, 5800, 14300, 18200, 9900, 6300, 20900, 22900, 18000,
            13000, 10700, 27800, 8500, 28100, 3700, 22300, 23300, 23800, 28300, 12600, 28300, 11000, 5700, 19100, 23600,
            7500, 6200, 20000, 27500, 29800, 28200, 20400, 9500, 28300, 12800, 23600, 3000, 18600, 24800, 11400, 22200,
            12600, 17600, 9100, 15100, 16500, 4400, 15000, 7100, 21800, 28400, 1300, 16500, 5400, 24100, 3700, 22800,
            18600, 6800, 9400, 20900, 9000, 7900, 15300, 6600, 18800, 5300, 6800, 18300, 23000, 24000, 23800, 26200,
            24300, 21300, 9500, 18600, 18800]
    good_p = np.array(
        [16, 21, 28, 97, 90, 3, 61, 77, 82, 29, 35, 63, 50, 54, 84, 91, 8, 42, 79, 12, 84, 81, 95, 36, 54, 25, 45, 12,
         75, 7, 79, 43, 14, 90, 70, 27, 46, 8, 19, 24, 86, 49, 9, 57, 13, 31, 22, 53, 3, 57, 64, 62, 32, 75, 87, 68, 95,
         8, 9, 32, 14, 24, 89, 39, 30, 72, 49, 60, 81, 28, 38, 90, 35, 14, 75, 65, 6, 13, 26, 10, 1, 38, 30, 19, 97, 55,
         36, 10, 86, 5, 0, 61, 16, 97, 18, 19, 75, 66, 69, 57])
    EC = [98, 21, 96, 58, 69, 75, 25, 95, 51, 41, 74, 91, 18, 41, 23, 74, 78, 38, 55, 32, 79, 88, 99, 45, 71, 98, 90,
          61, 89, 36, 27, 84, 32, 87, 34, 7, 12, 13, 67, 56, 92, 22, 74, 64, 76, 63, 70, 37, 34, 9, 63, 72, 17, 64, 11,
          90, 95, 58, 22, 19, 20, 28, 15, 50, 13, 5, 77, 57, 13, 71, 73, 19, 41, 42, 68, 77, 24, 68, 33, 63, 62, 33, 46,
          85, 9, 71, 41, 42, 79, 73, 38, 47, 40, 70, 14, 20, 68, 15, 26, 66]
    E = [478500]
    Co = [120]
    t = [401]
    Pir = [1]


    # -------------------- #
    mean_v = 90
    yunfei = 5  # 单位距离配送价格
    amin = [0] * M * Oir * O
  # 供应商对于不同资源的能耗  功率
    return M, Oir,O, d, P, t, yunfei, amin, amax ,Co ,Pir ,mean_v,good_p,E,EC
def init_data_e9():
    '''
    e9实验数据
    '''
    O, M, Oir = 1, 150, 1
    d = [240, 143, 132, 169, 101, 258, 110, 119, 210, 244, 255, 111, 260, 199, 269, 281, 281, 109, 113, 137, 230, 217,
         162, 146, 275, 284, 180, 179, 269, 138, 195, 274, 230, 197, 292, 223, 166, 216, 289, 181, 107, 299, 127, 166,
         295, 169, 105, 186, 260, 200, 146, 114, 178, 271, 261, 154, 189, 190, 165, 253, 141, 112, 252, 262, 209, 241,
         138, 104, 171, 226, 197, 149, 108, 174, 142, 157, 225, 219, 123, 242, 204, 169, 202, 162, 104, 127, 112, 274,
         215, 138, 102, 194, 113, 141, 120, 147, 241, 160, 280, 221, 203, 147, 111, 269, 229, 215, 288, 173, 216, 173,
         259, 291, 259, 139, 101, 152, 170, 147, 130, 277, 105, 284, 280, 195, 229, 293, 101, 170, 294, 253, 279, 277,
         228, 185, 166, 295, 227, 122, 157, 293, 233, 167, 276, 128, 279, 269, 233, 109, 240, 276]
    P = [246, 291, 167, 161, 115, 139, 215, 273, 266, 287, 279, 100, 180, 187, 239, 214, 291, 189, 111, 125, 147, 113,
         108, 231, 109, 148, 282, 289, 122, 227, 134, 254, 173, 275, 223, 152, 143, 296, 194, 276, 215, 171, 207, 156,
         245, 209, 264, 278, 241, 121, 207, 254, 290, 230, 223, 116, 146, 207, 282, 122, 261, 226, 102, 195, 278, 277,
         173, 226, 287, 249, 280, 149, 224, 238, 135, 197, 161, 259, 184, 150, 235, 176, 168, 186, 167, 255, 292, 197,
         167, 128, 210, 163, 298, 102, 204, 265, 275, 182, 298, 140, 229, 284, 175, 258, 183, 212, 149, 231, 145, 213,
         227, 232, 283, 223, 108, 113, 211, 193, 283, 133, 211, 230, 265, 162, 187, 158, 114, 297, 110, 256, 247, 186,
         102, 119, 231, 238, 246, 240, 214, 191, 200, 168, 139, 196, 185, 211, 201, 125, 171, 109]
    amax = [17600, 2000, 5100, 11600, 5100, 20700, 14400, 17000, 24100, 24300, 28900, 7100, 9100, 17500, 7800, 25800,
            11600, 20800, 17100, 12100, 28300, 26400, 27300, 9900, 21000, 9400, 26400, 4400, 4100, 16900, 18200, 6900,
            6200, 19100, 19100, 10000, 1600, 22100, 9700, 24100, 16900, 25000, 29600, 25400, 2500, 12100, 10100, 3200,
            22600, 22700, 29200, 3600, 17300, 3700, 18600, 5400, 10400, 5200, 22300, 14600, 3800, 29300, 10700, 16700,
            4600, 29600, 1600, 1000, 23100, 12200, 9500, 15900, 15500, 11500, 10600, 8300, 10700, 20500, 3200, 29500,
            10100, 20300, 12400, 14500, 20900, 15400, 24400, 18400, 11100, 11500, 15400, 28000, 15900, 12000, 28700,
            15800, 10400, 19300, 2000, 3600, 5200, 3300, 26000, 26900, 11200, 8300, 26300, 12100, 9800, 10500, 20800,
            5600, 19800, 9000, 6300, 27600, 8100, 23000, 29900, 9300, 1400, 8300, 6000, 7100, 6200, 2900, 14900, 20300,
            4000, 29800, 8600, 17100, 13300, 9300, 6500, 2000, 23400, 14500, 18700, 1200, 9600, 17200, 16900, 4300,
            16400, 22100, 10000, 14600, 28000, 1400]
    good_p = np.array(
        [61, 69, 29, 51, 97, 22, 98, 15, 93, 58, 16, 4, 55, 1, 68, 23, 16, 80, 73, 54, 34, 62, 76, 74, 82, 5, 47, 48,
         26, 32, 79, 61, 17, 79, 66, 68, 43, 90, 56, 57, 76, 96, 16, 33, 19, 86, 79, 2, 4, 42, 39, 52, 32, 36, 56, 28,
         94, 98, 0, 59, 7, 54, 34, 71, 10, 24, 86, 40, 14, 35, 97, 61, 69, 8, 4, 99, 3, 64, 75, 77, 32, 5, 26, 5, 14,
         35, 1, 27, 66, 38, 18, 7, 39, 44, 35, 85, 16, 35, 87, 5, 87, 58, 14, 36, 3, 85, 3, 40, 13, 22, 8, 92, 8, 90, 8,
         18, 34, 23, 25, 44, 42, 7, 72, 24, 22, 23, 81, 10, 26, 2, 26, 70, 96, 76, 98, 52, 71, 84, 84, 27, 85, 46, 28,
         97, 53, 31, 47, 75, 6, 83])
    EC = [17, 43, 91, 43, 95, 66, 29, 30, 82, 52, 29, 34, 6, 35, 97, 58, 92, 37, 71, 95, 10, 15, 21, 17, 6, 40, 33, 28,
          94, 98, 62, 90, 60, 28, 79, 87, 55, 23, 98, 61, 5, 60, 15, 83, 45, 29, 74, 41, 67, 97, 52, 55, 69, 29, 56, 34,
          87, 99, 84, 99, 81, 68, 46, 43, 67, 66, 47, 55, 89, 52, 24, 41, 78, 50, 63, 83, 28, 41, 61, 25, 20, 17, 18,
          32, 59, 11, 31, 69, 35, 22, 79, 43, 52, 94, 20, 58, 29, 29, 68, 41, 12, 6, 50, 46, 63, 82, 96, 89, 83, 94, 6,
          43, 48, 7, 49, 70, 6, 73, 22, 94, 76, 11, 78, 83, 93, 99, 44, 93, 74, 58, 96, 32, 74, 19, 49, 95, 62, 84, 20,
          82, 61, 91, 41, 30, 44, 62, 85, 40, 71, 11]
    E = [444700]
    Co = [192]
    t = [485]
    Pir = [2]


    # -------------------- #
    mean_v = 90
    yunfei = 5  # 单位距离配送价格
    amin = [0] * M * Oir * O
  # 供应商对于不同资源的能耗  功率
    return M, Oir,O, d, P, t, yunfei, amin, amax ,Co ,Pir ,mean_v,good_p,E,EC
def init_data_e10():
    '''
    e10实验数据
    '''
    O, M, Oir = 1, 200, 1
    d = [153, 101, 207, 227, 148, 247, 245, 202, 248, 194, 250, 224, 192, 132, 241, 269, 244, 130, 169, 270, 105, 101,
         217, 132, 154, 107, 224, 152, 245, 290, 239, 204, 233, 223, 269, 126, 293, 167, 126, 192, 262, 213, 269, 225,
         262, 232, 232, 166, 158, 131, 281, 290, 294, 233, 266, 143, 171, 278, 294, 292, 260, 261, 223, 166, 178, 104,
         111, 209, 100, 258, 140, 149, 121, 158, 240, 224, 241, 148, 158, 282, 190, 129, 202, 177, 209, 254, 127, 237,
         178, 163, 259, 149, 134, 205, 176, 290, 263, 185, 134, 170, 199, 110, 157, 122, 151, 243, 157, 189, 157, 218,
         134, 227, 208, 121, 256, 166, 246, 180, 161, 215, 142, 240, 164, 161, 159, 205, 262, 190, 153, 226, 218, 202,
         279, 235, 226, 140, 129, 136, 230, 111, 231, 168, 223, 186, 173, 146, 265, 166, 119, 111, 143, 184, 208, 270,
         206, 214, 286, 142, 150, 225, 224, 166, 166, 114, 185, 162, 208, 165, 195, 208, 121, 201, 105, 101, 130, 150,
         234, 164, 138, 217, 141, 293, 178, 108, 223, 117, 239, 141, 147, 281, 298, 128, 140, 125, 167, 123, 144, 227,
         187, 281]
    P = [157, 143, 265, 191, 247, 280, 225, 170, 168, 124, 232, 240, 132, 106, 128, 273, 273, 162, 265, 298, 202, 213,
         173, 180, 142, 226, 257, 215, 192, 199, 227, 174, 196, 200, 148, 288, 185, 249, 230, 294, 199, 137, 178, 184,
         130, 181, 246, 122, 235, 203, 180, 177, 130, 165, 169, 191, 111, 258, 159, 251, 122, 197, 209, 221, 261, 258,
         269, 210, 188, 131, 238, 161, 187, 136, 210, 229, 168, 134, 293, 170, 240, 182, 172, 139, 166, 142, 237, 160,
         105, 267, 221, 209, 291, 231, 205, 271, 256, 282, 148, 226, 135, 116, 216, 112, 261, 209, 158, 215, 115, 248,
         256, 232, 134, 141, 128, 272, 114, 201, 129, 143, 208, 127, 148, 217, 238, 178, 190, 140, 261, 256, 215, 215,
         242, 219, 298, 256, 288, 250, 132, 230, 193, 241, 148, 198, 280, 159, 207, 227, 111, 230, 255, 233, 241, 284,
         275, 274, 227, 213, 115, 260, 292, 143, 175, 288, 152, 250, 221, 124, 237, 136, 190, 297, 255, 150, 216, 250,
         292, 191, 136, 261, 185, 136, 211, 135, 149, 187, 114, 138, 290, 169, 192, 232, 147, 259, 253, 171, 265, 235,
         226, 219]
    amax = [14800, 18900, 7000, 13600, 5100, 15700, 2900, 22800, 7400, 2500, 20500, 11000, 18800, 26600, 11500, 25600,
            28500, 19000, 7100, 12400, 3300, 3000, 7500, 22000, 4600, 15100, 29800, 14900, 6000, 19000, 2200, 29500,
            11800, 27000, 16600, 15700, 29000, 7800, 26900, 11900, 7500, 6100, 3800, 3300, 18100, 17000, 7300, 18400,
            10100, 27800, 6600, 6500, 3400, 15100, 14900, 17100, 16300, 2500, 6200, 22200, 22100, 10300, 20500, 20400,
            11000, 13200, 8300, 22700, 6300, 6700, 19300, 22300, 26400, 14700, 2100, 20700, 2500, 27900, 8200, 18900,
            13400, 20800, 20000, 13500, 20800, 16700, 29700, 7500, 20800, 6300, 10100, 26000, 2600, 3700, 18400, 4600,
            3800, 6700, 23000, 1000, 12700, 8700, 13500, 29400, 27900, 16900, 10000, 1800, 12700, 23800, 15000, 13300,
            15100, 17900, 5600, 13100, 28000, 1100, 29600, 24000, 25700, 20700, 21000, 16400, 1500, 2400, 23800, 24600,
            17500, 19700, 17200, 20400, 14100, 3400, 15900, 15900, 5100, 7300, 26900, 15500, 20800, 13700, 22800, 13700,
            26700, 2300, 23900, 24900, 9700, 20600, 17100, 5200, 11700, 7000, 18600, 21600, 3100, 26200, 11300, 23500,
            23000, 23600, 29200, 19100, 24300, 21300, 27700, 11000, 28900, 5400, 12900, 18600, 19200, 27400, 3900,
            22700, 28000, 4600, 15200, 20800, 25000, 3500, 8800, 10900, 3500, 14300, 3800, 14100, 5400, 1500, 28900,
            23900, 9200, 15600, 28500, 8200, 8300, 10600, 29200, 11100]
    good_p = np.array(
        [23, 29, 46, 32, 41, 39, 76, 93, 24, 59, 85, 30, 90, 45, 33, 2, 44, 52, 10, 26, 66, 34, 42, 97, 32, 20, 50, 86,
         51, 69, 85, 12, 27, 89, 67, 98, 33, 76, 5, 35, 98, 25, 46, 3, 66, 13, 94, 98, 7, 28, 8, 54, 64, 7, 46, 52, 71,
         32, 33, 92, 38, 93, 45, 54, 92, 73, 8, 99, 85, 38, 51, 61, 37, 30, 63, 33, 1, 65, 55, 92, 69, 45, 2, 48, 75, 8,
         92, 34, 30, 98, 72, 26, 43, 63, 31, 50, 84, 91, 39, 8, 57, 39, 76, 26, 96, 13, 47, 15, 27, 35, 55, 94, 41, 61,
         19, 49, 50, 65, 22, 72, 46, 16, 1, 83, 79, 6, 59, 80, 40, 3, 11, 56, 87, 97, 71, 4, 12, 3, 2, 7, 69, 65, 18,
         53, 88, 47, 63, 78, 91, 99, 49, 75, 95, 70, 92, 11, 66, 89, 1, 49, 34, 33, 97, 25, 49, 46, 87, 48, 14, 73, 99,
         24, 3, 66, 77, 59, 47, 33, 45, 39, 24, 72, 23, 11, 80, 8, 12, 74, 57, 56, 34, 13, 64, 84, 37, 35, 98, 39, 41,
         32])
    EC = [67, 90, 22, 91, 40, 90, 69, 35, 17, 73, 18, 74, 99, 21, 39, 95, 69, 94, 22, 64, 60, 88, 95, 71, 41, 5, 70, 57,
          16, 42, 5, 85, 18, 76, 55, 55, 97, 75, 61, 62, 44, 9, 81, 81, 19, 96, 21, 70, 98, 18, 22, 32, 42, 71, 66, 92,
          26, 9, 8, 28, 65, 37, 26, 98, 43, 11, 9, 58, 90, 24, 52, 48, 41, 9, 45, 90, 23, 38, 99, 15, 85, 25, 86, 88,
          87, 42, 98, 44, 64, 46, 66, 8, 82, 26, 91, 38, 66, 76, 55, 84, 79, 46, 61, 84, 15, 80, 80, 86, 73, 93, 6, 50,
          6, 21, 34, 71, 14, 84, 57, 43, 93, 39, 26, 29, 77, 69, 16, 65, 52, 36, 53, 27, 53, 32, 43, 26, 76, 60, 49, 74,
          8, 25, 15, 60, 27, 68, 64, 63, 11, 6, 24, 79, 43, 64, 18, 40, 79, 6, 22, 45, 52, 29, 49, 97, 19, 68, 8, 35,
          41, 38, 32, 64, 35, 75, 98, 25, 29, 90, 72, 33, 48, 30, 73, 99, 96, 65, 91, 39, 98, 80, 85, 93, 51, 54, 22,
          99, 60, 33, 55, 83]
    E = [485600]
    Co = [144]
    t = [483]
    Pir = [1]


    # -------------------- #
    mean_v = 90
    yunfei = 5  # 单位距离配送价格
    amin = [0] * M * Oir * O
  # 供应商对于不同资源的能耗  功率
    return M, Oir,O, d, P, t, yunfei, amin, amax ,Co ,Pir ,mean_v,good_p,E,EC
'''
    O ,M ,Oir 
    p*n*m
    3*7*3
    3*10*3
    3*20*3
    2*20*2
    2*30*2
    2*50*2
    1*60*1
    1*100*1
    1*150*1
    1*200*1
'''
if __name__ == '__main__':
    O ,M ,Oir = 3,7,3
    d = np.random.randint(100,300,(M))
    P = np.random.randint(100,300,(M*Oir))
    amax = np.random.randint(10,300,(M*Oir))*100
    good_p = np.random.dirichlet(np.ones(M),Oir*O)*100
    good_p = np.reshape(good_p,(M*Oir*O))
    EC = np.random.randint(5, 100, (M*Oir)) # 供应商对于不同资源的能耗  功率
    E = np.random.randint(20000, 50000, (O))*100 # 供应商对于不同资源的能耗  功率
    Co = np.random.randint(5, 10, (O))*24# 供应商对于不同资源的能耗  功率
    t = np.random.randint(400/Oir, 600/Oir, (O*Oir))# 供应商对于不同资源的能耗  功率
    Pir = np.random.randint(1, 3, (O*Oir))# 供应商对于不同资源的能耗  功率
    print("O ,M ,Oir =",O ,",",M ,",",Oir)
    print('d =',d.tolist()*O*Oir)
    print("P =",P.tolist()*O)
    print("amax =",amax.tolist())
    print("good_p=np.array(",good_p.tolist(),")")
    print("EC=",EC.tolist())
    print("E =",E.tolist())
    print("Co =",Co.tolist())
    print("t =",t.tolist())
    print("Pir =",Pir.tolist())
    print("-"*10)
    from od_f import calc_e1, calc_e2, calc_e3, calc_e4, fitness, constraints, rt_idm, task_name
    print(fitness(good_p))
    print(calc_e1(good_p))
    print(calc_e2(good_p))
    print(calc_e3(good_p))
    print(calc_e4(good_p))
